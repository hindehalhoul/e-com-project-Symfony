use Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Guard\Authenticator\AbstractFormLoginAuthenticator;
use Symfony\Component\Security\Core\Security;

class LoginAuthenticator extends AbstractFormLoginAuthenticator
{
private $passwordHasher;

public function __construct(PasswordEncoderInterface $passwordHasher)
{
$this->passwordHasher = $passwordHasher;
}

public function supports(Request $request)
{
return $request->headers->get('Content-Type') === 'application/json' &&
$request->isMethod('POST') &&
$request->getPathInfo() === '/login';
}

public function getCredentials(Request $request)
{
$credentials = json_decode($request->getContent(), true);

$email = $credentials['email'];
$password = $credentials['password'];

return [
'email' => $email,
'password' => $password,
];
}

public function getUser($credentials, UserProviderInterface $userProvider)
{
$email = $credentials['email'];

return $userProvider->loadUserByUsername($email);
}

public function checkCredentials($credentials, UserInterface $user)
{
$plainPassword = $credentials['password'];
return $this->passwordHasher->isPasswordValid($user, $plainPassword);
}

public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
{
return new JsonResponse([
'status' => 'error',
'message' => 'Authentication failed',
'data' => [
'username' => $exception->getToken()->getUser()->getUsername()
]
]);
}

public function onAuthenticationSuccess(Request $request, $token, $providerKey)
{
$user = $token->getUser();
$id = $user->getId();
$email = $user->getEmail();

return new JsonResponse([
'status' => 'success',
'message' => 'Authentication successful!',
'data' => [
'id' => $id,
'email' => $email
]
]);
}

protected function getLoginUrl()
{
return '/login';
}
}